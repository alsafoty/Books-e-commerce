// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CLIENT
  ADMIN
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  mobile    String
  role      Role       @default(CLIENT)
  addresses Address[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  wishlist  Wishlist[]
  Order     Order[]
  Cart      Cart[]
}

model Address {
  id           String   @id @default(uuid())
  userId       Int
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  zip          String
  User         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  stock         Int            @default(0)
  categoryId    Int
  Category      Category       @relation(fields: [categoryId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ProductImages ProductImage[]
  wishlist      Wishlist[]
  OrderItem     OrderItem[]
  Cart          Cart[]
  CartItem      CartItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  productId Int
  url       String
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    Int
  productId Int
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      Int
  totalAmount Float
  status      String      @default("PENDING")
  User        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId Int
  quantity  Int      @default(1)
  price     Float
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    Int
  productId Int
  quantity  Int        @default(1)
  User      User       @relation(fields: [userId], references: [id])
  Product   Product    @relation(fields: [productId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId Int
  quantity  Int      @default(1)
  Cart      Cart     @relation(fields: [cartId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
